        /// <summary>
        /// Made this before I realized it was already built into winforms
        /// </summary>
        /// <param name="aPicture">Takes a Bitmap</param>
        /// <returns>And returns a bitmap resized to fit the picture box</returns>
        private Bitmap ScaleToFitPicBox(Bitmap aPicture)
        {
            int sourceWidth = aPicture.Width;
            int sourceHeight = aPicture.Height;
            int targetWidth;
            int targetHeight;
            int targetTop;
            int targetLeft;
            double ratio;

            Bitmap tempBitmap = new Bitmap(mainPictureBox.Width, mainPictureBox.Height);
            tempBitmap.SetResolution(aPicture.HorizontalResolution, aPicture.VerticalResolution);
            Graphics bmGraphics = Graphics.FromImage(tempBitmap);
            bmGraphics.Clear(Color.FromArgb(255, 30, 30, 30));
            bmGraphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;


            if (sourceWidth > sourceHeight)
            {
                targetWidth = mainPictureBox.Width;

                ratio = (double)targetWidth / sourceWidth;

                targetHeight = (int)(ratio * sourceWidth);
            }
            else if (sourceHeight < sourceWidth)
            {
                targetHeight = mainPictureBox.Height;

                ratio = (double)targetHeight / sourceHeight;

                targetWidth = (int)(ratio * sourceWidth);
            }
            else
            {
                targetWidth = mainPictureBox.Width;
                targetHeight = mainPictureBox.Height;
            }

            targetTop = (mainPictureBox.Height - targetHeight) / 2;
            targetLeft = (mainPictureBox.Width - targetWidth) / 2;

            bmGraphics.DrawImage(aPicture,
                                    new Rectangle(targetLeft, targetTop, targetWidth, targetHeight),
                                    new Rectangle(0, 0, sourceWidth, sourceHeight),
                                    GraphicsUnit.Pixel);
            bmGraphics.Dispose();

            return tempBitmap;
        }

		

        /// <summary>
        /// The slow way to iterate over and make a greyscale version of the image
        /// </summary>
        /// <param name="aB">the bitmap you're making greyscale</param>
        /// <param name="r">Coefficient of the red value, wikipedia recommends 0.28</param>
        /// <param name="g">Coefficient of the green value, wikipedia recommends 0.59</param>
        /// <param name="b">Coefficient of the blue value, wikipedia recommends 0.11</param>
        /// <returns></returns>
        private Bitmap ConvertToGreyscale(Bitmap aB, double r, double g, double b)
        {
            Bitmap aBitmap = aB;
            int greyColor;

            for (int x = 0; x < aBitmap.Width; x++)
            {
                for (int y = 0; y < aBitmap.Height; y++)
                {
                    Color oriColor = aBitmap.GetPixel(x, y);
                    greyColor = (int)((oriColor.R * r) + (oriColor.G * g) + (oriColor.B * b));
                    Color newColor = Color.FromArgb(greyColor, greyColor, greyColor);
                    aBitmap.SetPixel(x, y, newColor);
                }
            }
            return aB;
        }